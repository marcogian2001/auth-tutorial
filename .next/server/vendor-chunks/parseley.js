"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parseley";
exports.ids = ["vendor-chunks/parseley"];
exports.modules = {

/***/ "(action-browser)/./node_modules/parseley/lib/parseley.mjs":
/*!************************************************!*\
  !*** ./node_modules/parseley/lib/parseley.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ast: () => (/* binding */ ast),\n/* harmony export */   compareSelectors: () => (/* binding */ compareSelectors),\n/* harmony export */   compareSpecificity: () => (/* binding */ compareSpecificity),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parse1: () => (/* binding */ parse1),\n/* harmony export */   serialize: () => (/* binding */ serialize)\n/* harmony export */ });\n/* harmony import */ var leac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leac */ \"(action-browser)/./node_modules/leac/lib/leac.mjs\");\n/* harmony import */ var peberminta__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! peberminta */ \"(action-browser)/./node_modules/peberminta/lib/core.mjs\");\n\n\nvar ast = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nconst ws = `(?:[ \\\\t\\\\r\\\\n\\\\f]*)`;\nconst nl = `(?:\\\\n|\\\\r\\\\n|\\\\r|\\\\f)`;\nconst nonascii = `[^\\\\x00-\\\\x7F]`;\nconst unicode = `(?:\\\\\\\\[0-9a-f]{1,6}(?:\\\\r\\\\n|[ \\\\n\\\\r\\\\t\\\\f])?)`;\nconst escape = `(?:\\\\\\\\[^\\\\n\\\\r\\\\f0-9a-f])`;\nconst nmstart = `(?:[_a-z]|${nonascii}|${unicode}|${escape})`;\nconst nmchar = `(?:[_a-z0-9-]|${nonascii}|${unicode}|${escape})`;\nconst name = `(?:${nmchar}+)`;\nconst ident = `(?:[-]?${nmstart}${nmchar}*)`;\nconst string1 = `'([^\\\\n\\\\r\\\\f\\\\\\\\']|\\\\\\\\${nl}|${nonascii}|${unicode}|${escape})*'`;\nconst string2 = `\"([^\\\\n\\\\r\\\\f\\\\\\\\\"]|\\\\\\\\${nl}|${nonascii}|${unicode}|${escape})*\"`;\nconst lexSelector = (0,leac__WEBPACK_IMPORTED_MODULE_0__.createLexer)([\n    {\n        name: \"ws\",\n        regex: new RegExp(ws)\n    },\n    {\n        name: \"hash\",\n        regex: new RegExp(`#${name}`, \"i\")\n    },\n    {\n        name: \"ident\",\n        regex: new RegExp(ident, \"i\")\n    },\n    {\n        name: \"str1\",\n        regex: new RegExp(string1, \"i\")\n    },\n    {\n        name: \"str2\",\n        regex: new RegExp(string2, \"i\")\n    },\n    {\n        name: \"*\"\n    },\n    {\n        name: \".\"\n    },\n    {\n        name: \",\"\n    },\n    {\n        name: \"[\"\n    },\n    {\n        name: \"]\"\n    },\n    {\n        name: \"=\"\n    },\n    {\n        name: \">\"\n    },\n    {\n        name: \"|\"\n    },\n    {\n        name: \"+\"\n    },\n    {\n        name: \"~\"\n    },\n    {\n        name: \"^\"\n    },\n    {\n        name: \"$\"\n    }\n]);\nconst lexEscapedString = (0,leac__WEBPACK_IMPORTED_MODULE_0__.createLexer)([\n    {\n        name: \"unicode\",\n        regex: new RegExp(unicode, \"i\")\n    },\n    {\n        name: \"escape\",\n        regex: new RegExp(escape, \"i\")\n    },\n    {\n        name: \"any\",\n        regex: new RegExp(\"[\\\\s\\\\S]\", \"i\")\n    }\n]);\nfunction sumSpec([a0, a1, a2], [b0, b1, b2]) {\n    return [\n        a0 + b0,\n        a1 + b1,\n        a2 + b2\n    ];\n}\nfunction sumAllSpec(ss) {\n    return ss.reduce(sumSpec, [\n        0,\n        0,\n        0\n    ]);\n}\nconst unicodeEscapedSequence_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"unicode\" ? String.fromCodePoint(parseInt(t.text.slice(1), 16)) : undefined);\nconst escapedSequence_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"escape\" ? t.text.slice(1) : undefined);\nconst anyChar_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"any\" ? t.text : undefined);\nconst escapedString_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(peberminta__WEBPACK_IMPORTED_MODULE_1__.many(peberminta__WEBPACK_IMPORTED_MODULE_1__.or(unicodeEscapedSequence_, escapedSequence_, anyChar_)), (cs)=>cs.join(\"\"));\nfunction unescape(escapedString) {\n    const lexerResult = lexEscapedString(escapedString);\n    const result = escapedString_({\n        tokens: lexerResult.tokens,\n        options: undefined\n    }, 0);\n    return result.value;\n}\nfunction literal(name) {\n    return peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === name ? true : undefined);\n}\nconst whitespace_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"ws\" ? null : undefined);\nconst optionalWhitespace_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.option(whitespace_, null);\nfunction optionallySpaced(parser) {\n    return peberminta__WEBPACK_IMPORTED_MODULE_1__.middle(optionalWhitespace_, parser, optionalWhitespace_);\n}\nconst identifier_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"ident\" ? unescape(t.text) : undefined);\nconst hashId_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"hash\" ? unescape(t.text.slice(1)) : undefined);\nconst string_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name.startsWith(\"str\") ? unescape(t.text.slice(1, -1)) : undefined);\nconst namespace_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.left(peberminta__WEBPACK_IMPORTED_MODULE_1__.option(identifier_, \"\"), literal(\"|\"));\nconst qualifiedName_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(namespace_, identifier_, (ns, name)=>({\n        name: name,\n        namespace: ns\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(identifier_, (name)=>({\n        name: name,\n        namespace: null\n    })));\nconst uniSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(namespace_, literal(\"*\"), (ns)=>({\n        type: \"universal\",\n        namespace: ns,\n        specificity: [\n            0,\n            0,\n            0\n        ]\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"*\"), ()=>({\n        type: \"universal\",\n        namespace: null,\n        specificity: [\n            0,\n            0,\n            0\n        ]\n    })));\nconst tagSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(qualifiedName_, ({ name, namespace })=>({\n        type: \"tag\",\n        name: name,\n        namespace: namespace,\n        specificity: [\n            0,\n            0,\n            1\n        ]\n    }));\nconst classSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\".\"), identifier_, (fullstop, name)=>({\n        type: \"class\",\n        name: name,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    }));\nconst idSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(hashId_, (name)=>({\n        type: \"id\",\n        name: name,\n        specificity: [\n            1,\n            0,\n            0\n        ]\n    }));\nconst attrModifier_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>{\n    if (t.name === \"ident\") {\n        if (t.text === \"i\" || t.text === \"I\") {\n            return \"i\";\n        }\n        if (t.text === \"s\" || t.text === \"S\") {\n            return \"s\";\n        }\n    }\n    return undefined;\n});\nconst attrValue_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(string_, peberminta__WEBPACK_IMPORTED_MODULE_1__.option(peberminta__WEBPACK_IMPORTED_MODULE_1__.right(optionalWhitespace_, attrModifier_), null), (v, mod)=>({\n        value: v,\n        modifier: mod\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(identifier_, peberminta__WEBPACK_IMPORTED_MODULE_1__.option(peberminta__WEBPACK_IMPORTED_MODULE_1__.right(whitespace_, attrModifier_), null), (v, mod)=>({\n        value: v,\n        modifier: mod\n    })));\nconst attrMatcher_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.choice(peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"=\"), ()=>\"=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"~\"), literal(\"=\"), ()=>\"~=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"|\"), literal(\"=\"), ()=>\"|=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"^\"), literal(\"=\"), ()=>\"^=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"$\"), literal(\"=\"), ()=>\"$=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"*\"), literal(\"=\"), ()=>\"*=\"));\nconst attrPresenceSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.abc(literal(\"[\"), optionallySpaced(qualifiedName_), literal(\"]\"), (lbr, { name, namespace })=>({\n        type: \"attrPresence\",\n        name: name,\n        namespace: namespace,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    }));\nconst attrValueSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.middle(literal(\"[\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.abc(optionallySpaced(qualifiedName_), attrMatcher_, optionallySpaced(attrValue_), ({ name, namespace }, matcher, { value, modifier })=>({\n        type: \"attrValue\",\n        name: name,\n        namespace: namespace,\n        matcher: matcher,\n        value: value,\n        modifier: modifier,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    })), literal(\"]\"));\nconst attrSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(attrPresenceSelector_, attrValueSelector_);\nconst typeSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(uniSelector_, tagSelector_);\nconst subclassSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.choice(idSelector_, classSelector_, attrSelector_);\nconst compoundSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.flatten(typeSelector_, peberminta__WEBPACK_IMPORTED_MODULE_1__.many(subclassSelector_)), peberminta__WEBPACK_IMPORTED_MODULE_1__.many1(subclassSelector_)), (ss)=>{\n    return {\n        type: \"compound\",\n        list: ss,\n        specificity: sumAllSpec(ss.map((s)=>s.specificity))\n    };\n});\nconst combinator_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.choice(peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\">\"), ()=>\">\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"+\"), ()=>\"+\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"~\"), ()=>\"~\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"|\"), literal(\"|\"), ()=>\"||\"));\nconst combinatorSeparator_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(optionallySpaced(combinator_), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(whitespace_, ()=>\" \"));\nconst complexSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.leftAssoc2(compoundSelector_, peberminta__WEBPACK_IMPORTED_MODULE_1__.map(combinatorSeparator_, (c)=>(left, right)=>({\n            type: \"compound\",\n            list: [\n                ...right.list,\n                {\n                    type: \"combinator\",\n                    combinator: c,\n                    left: left,\n                    specificity: left.specificity\n                }\n            ],\n            specificity: sumSpec(left.specificity, right.specificity)\n        })), compoundSelector_);\nconst listSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.leftAssoc2(peberminta__WEBPACK_IMPORTED_MODULE_1__.map(complexSelector_, (s)=>({\n        type: \"list\",\n        list: [\n            s\n        ]\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(optionallySpaced(literal(\",\")), ()=>(acc, next)=>({\n            type: \"list\",\n            list: [\n                ...acc.list,\n                next\n            ]\n        })), complexSelector_);\nfunction parse_(parser, str) {\n    if (!(typeof str === \"string\" || str instanceof String)) {\n        throw new Error(\"Expected a selector string. Actual input is not a string!\");\n    }\n    const lexerResult = lexSelector(str);\n    if (!lexerResult.complete) {\n        throw new Error(`The input \"${str}\" was only partially tokenized, stopped at offset ${lexerResult.offset}!\\n` + prettyPrintPosition(str, lexerResult.offset));\n    }\n    const result = optionallySpaced(parser)({\n        tokens: lexerResult.tokens,\n        options: undefined\n    }, 0);\n    if (!result.matched) {\n        throw new Error(`No match for \"${str}\" input!`);\n    }\n    if (result.position < lexerResult.tokens.length) {\n        const token = lexerResult.tokens[result.position];\n        throw new Error(`The input \"${str}\" was only partially parsed, stopped at offset ${token.offset}!\\n` + prettyPrintPosition(str, token.offset, token.len));\n    }\n    return result.value;\n}\nfunction prettyPrintPosition(str, offset, len = 1) {\n    return `${str.replace(/(\\t)|(\\r)|(\\n)/g, (m, t, r)=>t ? \"␉\" : r ? \"␍\" : \"␊\")}\\n${\"\".padEnd(offset)}${\"^\".repeat(len)}`;\n}\nfunction parse(str) {\n    return parse_(listSelector_, str);\n}\nfunction parse1(str) {\n    return parse_(complexSelector_, str);\n}\nfunction serialize(selector) {\n    if (!selector.type) {\n        throw new Error(\"This is not an AST node.\");\n    }\n    switch(selector.type){\n        case \"universal\":\n            return _serNs(selector.namespace) + \"*\";\n        case \"tag\":\n            return _serNs(selector.namespace) + _serIdent(selector.name);\n        case \"class\":\n            return \".\" + _serIdent(selector.name);\n        case \"id\":\n            return \"#\" + _serIdent(selector.name);\n        case \"attrPresence\":\n            return `[${_serNs(selector.namespace)}${_serIdent(selector.name)}]`;\n        case \"attrValue\":\n            return `[${_serNs(selector.namespace)}${_serIdent(selector.name)}${selector.matcher}\"${_serStr(selector.value)}\"${selector.modifier ? selector.modifier : \"\"}]`;\n        case \"combinator\":\n            return serialize(selector.left) + selector.combinator;\n        case \"compound\":\n            return selector.list.reduce((acc, node)=>{\n                if (node.type === \"combinator\") {\n                    return serialize(node) + acc;\n                } else {\n                    return acc + serialize(node);\n                }\n            }, \"\");\n        case \"list\":\n            return selector.list.map(serialize).join(\",\");\n    }\n}\nfunction _serNs(ns) {\n    return ns || ns === \"\" ? _serIdent(ns) + \"|\" : \"\";\n}\nfunction _codePoint(char) {\n    return `\\\\${char.codePointAt(0).toString(16)} `;\n}\nfunction _serIdent(str) {\n    return str.replace(/(^[0-9])|(^-[0-9])|(^-$)|([-0-9a-zA-Z_]|[^\\x00-\\x7F])|(\\x00)|([\\x01-\\x1f]|\\x7f)|([\\s\\S])/g, (m, d1, d2, hy, safe, nl, ctrl, other)=>d1 ? _codePoint(d1) : d2 ? \"-\" + _codePoint(d2.slice(1)) : hy ? \"\\\\-\" : safe ? safe : nl ? \"�\" : ctrl ? _codePoint(ctrl) : \"\\\\\" + other);\n}\nfunction _serStr(str) {\n    return str.replace(/(\")|(\\\\)|(\\x00)|([\\x01-\\x1f]|\\x7f)/g, (m, dq, bs, nl, ctrl)=>dq ? '\\\\\"' : bs ? \"\\\\\\\\\" : nl ? \"�\" : _codePoint(ctrl));\n}\nfunction normalize(selector) {\n    if (!selector.type) {\n        throw new Error(\"This is not an AST node.\");\n    }\n    switch(selector.type){\n        case \"compound\":\n            {\n                selector.list.forEach(normalize);\n                selector.list.sort((a, b)=>_compareArrays(_getSelectorPriority(a), _getSelectorPriority(b)));\n                break;\n            }\n        case \"combinator\":\n            {\n                normalize(selector.left);\n                break;\n            }\n        case \"list\":\n            {\n                selector.list.forEach(normalize);\n                selector.list.sort((a, b)=>serialize(a) < serialize(b) ? -1 : 1);\n                break;\n            }\n    }\n    return selector;\n}\nfunction _getSelectorPriority(selector) {\n    switch(selector.type){\n        case \"universal\":\n            return [\n                1\n            ];\n        case \"tag\":\n            return [\n                1\n            ];\n        case \"id\":\n            return [\n                2\n            ];\n        case \"class\":\n            return [\n                3,\n                selector.name\n            ];\n        case \"attrPresence\":\n            return [\n                4,\n                serialize(selector)\n            ];\n        case \"attrValue\":\n            return [\n                5,\n                serialize(selector)\n            ];\n        case \"combinator\":\n            return [\n                15,\n                serialize(selector)\n            ];\n    }\n}\nfunction compareSelectors(a, b) {\n    return _compareArrays(a.specificity, b.specificity);\n}\nfunction compareSpecificity(a, b) {\n    return _compareArrays(a, b);\n}\nfunction _compareArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        throw new Error(\"Arguments must be arrays.\");\n    }\n    const shorter = a.length < b.length ? a.length : b.length;\n    for(let i = 0; i < shorter; i++){\n        if (a[i] === b[i]) {\n            continue;\n        }\n        return a[i] < b[i] ? -1 : 1;\n    }\n    return a.length - b.length;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/parseley/lib/parseley.mjs\n");

/***/ })

};
;